{"version":3,"sources":["kinako2.jpg","model_classes.js","App.js","index.js"],"names":["annotationNames","widthForTensor","heightForTensor","LoadModel","a","tf","model","imgToTensor","img","imgTensor","fromPixels","resizeBilinear","div","expandDims","PerformDetect","executeAsync","results","formatOutPut","dataSync","boxes","scores","classes","valid_detections","predictionsArray","i","slice","x1","y1","x2","y2","boxWidth","xEnd","xStart","boxHeight","yEnd","yStart","score","toFixed","classIndex","annotationName","push","wrapOnloadExecute","ref","event","target","crossOrigin","predictions","canvas","current","ctx","getContext","drawImage","forEach","prediction","drawDetection","beginPath","strokeStyle","lineWidth","rect","fillText","stroke","App","imgRef","React","useRef","boxRef","useEffect","src","Kinako","onLoad","alt","width","height","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.1ea6972b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/kinako2.c8801558.jpg\";","export const annotationNames = [\n  \"person\",\n  \"bicycle\",\n  \"car\",\n  \"motorcycle\",\n  \"airplane\",\n  \"bus\",\n  \"train\",\n  \"truck\",\n  \"boat\",\n  \"traffic light\",\n  \"fire hydrant\",\n  \"stop sign\",\n  \"parking meter\",\n  \"bench\",\n  \"bird\",\n  \"cat\",\n  \"dog\",\n  \"horse\",\n  \"sheep\",\n  \"cow\",\n  \"elephant\",\n  \"bear\",\n  \"zebra\",\n  \"giraffe\",\n  \"backpack\",\n  \"umbrella\",\n  \"handbag\",\n  \"tie\",\n  \"suitcase\",\n  \"frisbee\",\n  \"skis\",\n  \"snowboard\",\n  \"sports ball\",\n  \"kite\",\n  \"baseball bat\",\n  \"baseball glove\",\n  \"skateboard\",\n  \"surfboard\",\n  \"tennis racket\",\n  \"bottle\",\n  \"wine glass\",\n  \"cup\",\n  \"fork\",\n  \"knife\",\n  \"spoon\",\n  \"bowl\",\n  \"banana\",\n  \"apple\",\n  \"sandwich\",\n  \"orange\",\n  \"broccoli\",\n  \"carrot\",\n  \"hot dog\",\n  \"pizza\",\n  \"donut\",\n  \"cake\",\n  \"chair\",\n  \"couch\",\n  \"potted plant\",\n  \"bed\",\n  \"dining table\",\n  \"toilet\",\n  \"tv\",\n  \"laptop\",\n  \"mouse\",\n  \"remote\",\n  \"keyboard\",\n  \"cell phone\",\n  \"microwave\",\n  \"oven\",\n  \"toaster\",\n  \"sink\",\n  \"refrigerator\",\n  \"book\",\n  \"clock\",\n  \"vase\",\n  \"scissors\",\n  \"teddy bear\",\n  \"hair drier\",\n  \"toothbrush\"\n];\n\n/* \nyolov5で得られるOutputの index1番目の要素, classesの値(number)と\nclassNameのIndex番号が対応している.\nたとえば classes[i]の値が0のとき, className[0] -> \"person\"\n*/\n","import \"./styles.css\";\nimport React from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nimport Kinako from \"./kinako2.jpg\"; // Cat in Sugashima island\nimport { annotationNames } from \"./model_classes\";\n\nconst modelPath = \"/web_model/model.json\";\nconst widthForTensor = 320;\nconst heightForTensor = 320;\n\nconst LoadModel = async () => {\n  await tf.ready();\n  const model = await tf.loadGraphModel(modelPath);\n  return model;\n};\n\nfunction ImgRefToImg(imgRef) {\n  const img = new Image();\n  img.crossOrigin = \"Anonymous\";\n  img.src = imgRef.current.src;\n  img.width = widthForTensor;\n  img.height = heightForTensor;\n  return img;\n}\n\nfunction imgToTensor(img) {\n  // const imgTensor = await tf.browser.fromPixelsAsync(img);\n  const imgTensor = tf.browser.fromPixels(img);\n  const inputTensor = tf.image\n    .resizeBilinear(imgTensor, [widthForTensor, heightForTensor])\n    .div(255.0)\n    .expandDims(0);\n  return inputTensor;\n}\n\nasync function PerformDetect(imgTensor) {\n  // 1. Load model\n  const model = await LoadModel();\n  // 2. Load image from by refering to image tag.\n  // const img = ImgRefToImg(imgRef);\n\n  // 3. Convert HTMLImageElement to tensor\n  // const inputTensor = imgToTensor(img);\n\n  // 4. Execute prediction\n  const results = await model.executeAsync(imgTensor);\n  return results;\n}\n\nasync function formatOutPut(results) {\n  const boxes = await results[0].dataSync();\n  const scores = await results[1].dataSync();\n  const classes = await results[2].dataSync();\n  const valid_detections = await results[3].dataSync();\n\n  const predictionsArray = [];\n  for (let i = 0; i < valid_detections[0]; ++i) {\n    let [x1, y1, x2, y2] = boxes.slice(i * 4, (i + 1) * 4);\n    const xStart = x1 * widthForTensor;\n    const xEnd = x2 * widthForTensor;\n    const boxWidth = xEnd - xStart;\n\n    const yStart = y1 * heightForTensor;\n    const yEnd = y2 * heightForTensor;\n    const boxHeight = yEnd - yStart;\n\n    const score = scores[i].toFixed(2);\n\n    // AIの判定した数字を人間が読んでわかる文字列に変換\n    const classIndex = classes[i];\n    const annotationName = annotationNames[classIndex];\n    predictionsArray.push({\n      xStart,\n      xEnd,\n      boxWidth,\n      yStart,\n      yEnd,\n      boxHeight,\n      annotationName,\n      score\n    });\n  }\n  return predictionsArray;\n}\n\n// Execute prediction\n// 1. Load image from img tag\n// 2. Convert image to tensor and resize.\n// 3. Calculate prediction\n// 4 Format prediction data\n// 5. Draw bounding box and annotation\n\nconst wrapOnloadExecute = (ref) => {\n  async function onLoadExecute(event) {\n    const img = event.target;\n    img.crossOrigin = \"Anonymous\";\n    const imgTensor = imgToTensor(img);\n\n    const predictions = await PerformDetect(imgTensor);\n    const predictionsArray = await formatOutPut(predictions);\n\n    const canvas = ref.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(img, 0, 0);\n\n    predictionsArray.forEach((prediction) => {\n      drawDetection(prediction, ctx);\n    });\n  }\n  return onLoadExecute;\n};\n\n// Draw the bounding box from a prediction to canvas\n// ctx: CanvasRenderingContext2D\nfunction drawDetection(prediction, ctx) {\n  // Split prediction data\n  const {\n    xStart,\n    yStart,\n    boxWidth,\n    boxHeight,\n    annotationName,\n    score\n  } = prediction;\n\n  ctx.beginPath();\n  ctx.strokeStyle = \"#00FFFF\";\n  ctx.lineWidth = 4;\n  // Draw line\n  ctx.rect(xStart, yStart, boxWidth, boxHeight);\n  // Draw annotation string and score.\n  ctx.fillText(`${annotationName}:${score}`, xStart, yStart - 5);\n  ctx.stroke();\n}\n\nexport default function App() {\n  const imgRef = React.useRef(null);\n  const boxRef = React.useRef(null);\n  React.useEffect(() => {}, []);\n  return (\n    <>\n      <h1>Hello Yolov5</h1>\n      <p>Hi I am a cat</p>\n      <img\n        ref={imgRef}\n        src={Kinako}\n        onLoad={wrapOnloadExecute(boxRef)}\n        alt=\"kinako\"\n      />\n      <canvas ref={boxRef} width=\"320\" height=\"320\" />\n    </>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}